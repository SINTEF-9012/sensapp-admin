//*********************************//*********************************// Sensor Display Functions//**********************************function getAllSensorsForVisu (targetURL,table) {	$.ajax({		type: "get",		url: targetURL,		contentType: "application/json",		dataType:'json',		success: 			function (data, textStatus, jqXHR) {				if (data.length!=0) {					displayAllSensorsForVisu(data,table);				}			},		error: 			function (jqXHR, textStatus, errorThrown) {				alertMessage("error",errorThrown,5000);			}	});}function displayAllSensorsForVisu (data,table) {				var sensorArray = new Array();	var columnsJson = [{"sTitle":"Name"},{"sTitle":"Description"},{"sTitle":"Actions"}];	$.each(data, function (i,element) {		sensorArray.push( [createNameColumn(element.id,"sensor").html(),createDescriptionColumn(element,"sensor").html(),createVisuActions(element).html()] );	});	tableToJqueryDataTable(sensorArray,columnsJson,table);}function createVisuActions(sensor) {	return $(document.createElement('td'))		.append(				//View Button			$(document.createElement('a'))				.attr("class","btn")				.attr("href","#view")				.attr("onclick","getData(getURL(topology,'database."+sensor.backend.kind+"','"+sensor.backend.dataset+"?limit=20000'),'"+sensor.id+"','"+sensor.backend.kind+"','sensorDiv','data');")				.text("View")		);}//*********************************// Raw Display Functions//**********************************function getData(targetURL,sensorName,dataType,sensorDiv,dataDiv) {	$('body').css('cursor','wait');	$('a').css('cursor','wait');	$('button').css('cursor','wait');	$.ajax({		type: "get",		url: targetURL,		headers: { 			Accept : "application/json"		},		dataType: 'json',		success:			function (data, textStatus, jqXHR) {				jsonRawData.push(data);				switch (dataType) {					case "raw":							$('#'+dataDiv).find('#dataTitle').text(sensorName);							$('#'+dataDiv).show();							displayRawData($('#'+dataDiv).find('#rawDataTableDiv').attr('id'),data);							$('#'+sensorDiv).hide();						break;					default:						break;				}				$('body').css('cursor','auto');				$('a').css('cursor','pointer');				$('button').css('cursor','pointer');			},		error:			function (jqXHR, textStatus, errorThrown) {				$('body').css('cursor','auto');				$('a').css('cursor','pointer');				$('button').css('cursor','pointer');				alertMessage("error",errorThrown,5000);			}	});}function displayRawData(dataTableDiv,data) {		if($('#'+dataTableDiv).find('.dataTables_empty').size()>0) {				var dataArray = new Array();		var columnsJson = [{"sTitle":"Time"},{"sTitle":"Value"}];		if(typeof data.e[0].v!='undefined') {			if(typeof data.bt=='undefined') {				$.each(data.e, function (i,element) {					dataArray.push( [timeStampToDate(element.t),element.v + " " + element.u] );				});			}			else {				$.each(data.e, function (i,element) {					dataArray.push( [timeStampToDate(element.t+data.bt),element.v + " " + element.u] );				});			}		} else { 			if (typeof data.e[0].sv!='undefined') {				if(typeof data.bt=='undefined') {					$.each(data.e, function (i,element) {						dataArray.push( [timeStampToDate(element.t),element.sv + " " + element.u] );					});				}				else {					$.each(data.e, function (i,element) {						dataArray.push( [timeStampToDate(element.t+data.bt),element.sv + " " + element.u] );					});				}			} else { 				if (typeof data.e[0].bv!='undefined') {					if(typeof data.bt=='undefined') {						$.each(data.e, function (i,element) {							dataArray.push( [timeStampToDate(element.t),element.bv] );						});					}					else {						$.each(data.e, function (i,element) {							dataArray.push( [timeStampToDate(element.t+data.bt),element.bv] );						});					}				} else {					if (typeof data.e[0].s!='undefined') {						if(typeof data.bt=='undefined') {							$.each(data.e, function (i,element) {								dataArray.push( [timeStampToDate(element.t),element.bv] );							});						}						else {							$.each(data.e, function (i,element) {								dataArray.push([timeStampToDate(element.t+data.bt),element.bv]);							});						}					}				}			}		}		$('#'+dataTableDiv).find('table').dataTable().fnAddData(dataArray);	}	$('#'+dataTableDiv).show();	}function displayRawTimeSerie(div,data) {	$('#'+div).show();	if($('#'+div).children().size()==0){		highchartsData=SenMLToHighcharts(data);		$(document).ready(function() {			rawChart = new Highcharts.StockChart({				chart: {					renderTo: div,				},				title: {					text: data.bn				},				series: [{					data: highchartsData				}]			});		});	}}function cleanData(sensorDiv,dataDiv) {	$('#'+dataDiv).find('#rawDataTableDiv').find('table').dataTable().fnClearTable();	$('#'+dataDiv).find('#rawTimeSerieDiv').empty();	jsonRawData = [];	$('#'+dataDiv).find('#rawDataTableDiv').hide();	$('#'+dataDiv).find('#rawTimeSerieDiv').hide();	$('#'+dataDiv).hide();	$('#'+sensorDiv).show();	}//*********************************// Raw Data Transformation//*********************************function SenMLToHighcharts(senMLData) {	var highchartsData = new Array();	if(typeof senMLData.bt=='undefined') {		$.each(senMLData.e, function (i,element) {				highchartsData.push([element.t*1000,element.v]);					});	}	else {		$.each(senMLData.e, function (i,element) {				highchartsData.push([(element.t+senMLData.bt)*1000,element.v]);				});	}		highchartsData.sort(sortByTime);	return highchartsData;	}function sortByTime(a, b){  var aTime = a[0];  var bTime = b[0];   return ((aTime < bTime) ? -1 : ((aTime > bTime) ? 1 : 0));}