//*********************************// Sensor Display Functions//**********************************//Init Main Pagefunction getAllSensorsForVisu (targetURL,table) {	$.ajax({		type: "get",		url: targetURL,		contentType: "application/json",		dataType:'json',		success: 			function (data, textStatus, jqXHR) {				if (data.length!=0) {					displayAllSensorsForVisu(data,table);				}			},		error: 			function (jqXHR, textStatus, errorThrown) {				alertMessage("error",errorThrown,5000);			}	});}function displayAllSensorsForVisu (data,table) {				var sensorArray = new Array();	var columnsJson = [{"sTitle":"Name","asSorting":["desc"]},{"sTitle":"Description"},{"sTitle":"Actions"}];	$.each(data, function (i,element) {		sensorArray.push( [createNameColumn(element.id,"sensor").html(),createDescriptionColumn(element,"sensor").html(),createVisuActions(element).html()] );	});	tableToJqueryDataTable(sensorArray,columnsJson,table);}function createVisuActions(sensor) {	return $(document.createElement('td'))		.append(				//View Button			$(document.createElement('a'))				.attr("class","btn")				.attr("href","#view")				.attr("onclick","getData(getURL(getTopology(),'database."+sensor.backend.kind+"','"+sensor.backend.dataset+"'),'"+sensor.id+"','"+sensor.backend.kind+"','sensorDiv','data');")				.text("View")		);}//*********************************// Raw Display Functions//**********************************function getData(targetURL,sensorName,dataType,sensorDiv,dataDiv) {	//Please Wait	$('body').css('cursor','wait');	$('a').css('cursor','wait');	$('button').css('cursor','wait');		//Get Options	var from = $('#'+sensorDiv).find('#from').val();	var to = $('#'+sensorDiv).find('#to').val();	var limit = $('#'+sensorDiv).find('#limit').val();		var query="?";	if(to!="") {		if(from!="") {			query+="from="+from+"&to="+to+"&";		}		else {			query+="from=0&to="+to+"&";		}	}	else {		if(from!="") {			query+="from="+from+"&";		}	}	if(limit!="") {		query+="limit="+limit+"&";	}	query+="sorted=asc";	//Get data	$.ajax({		type: "get",		url: targetURL+query,		headers: { 			Accept : "application/json"		},		dataType: 'json',		success:			function (data, textStatus, jqXHR) {				jsonRawData.push(data);				switch (dataType) {					case "raw":							$('#'+dataDiv).find('#dataTitle').text(sensorName);							$('#'+dataDiv).show();							//Can make other display by changing this function							displayRawData($('#'+dataDiv).find('#rawDataTableDiv').attr('id'),data);							$('#'+sensorDiv).hide();						break;					default:						break;				}				$('body').css('cursor','auto');				$('a').css('cursor','pointer');				$('button').css('cursor','pointer');			},		error:			function (jqXHR, textStatus, errorThrown) {				$('body').css('cursor','auto');				$('a').css('cursor','pointer');				$('button').css('cursor','pointer');				alertMessage("error",errorThrown,5000);			}	});}//Table Viewfunction displayRawData(dataTableDiv,data) {	if($('#'+dataTableDiv).find('.dataTables_empty').size()>0) {		var dataArray = new Array();			//Check out the kind of data		if(typeof data.e!='undefined') {			if(typeof data.e[0].v!='undefined') {				if(typeof data.bt=='undefined') {					$.each(data.e, function (i,element) {						dataArray.push( [timeStampToDate(element.t),element.v + " " + element.u] );					});				}				else {					$.each(data.e, function (i,element) {						dataArray.push( [timeStampToDate(element.t+data.bt),element.v + " " + element.u] );					});				}			} else { 				if (typeof data.e[0].sv!='undefined') {					if(typeof data.bt=='undefined') {						$.each(data.e, function (i,element) {							dataArray.push( [timeStampToDate(element.t),element.sv + " " + element.u] );						});					}					else {						$.each(data.e, function (i,element) {							dataArray.push( [timeStampToDate(element.t+data.bt),element.sv + " " + element.u] );						});					}				} else { 					if (typeof data.e[0].bv!='undefined') {						if(typeof data.bt=='undefined') {							$.each(data.e, function (i,element) {								dataArray.push( [timeStampToDate(element.t),element.bv] );							});						}						else {							$.each(data.e, function (i,element) {								dataArray.push( [timeStampToDate(element.t+data.bt),element.bv] );							});						}					} else {						if (typeof data.e[0].s!='undefined') {							if(typeof data.bt=='undefined') {								$.each(data.e, function (i,element) {									dataArray.push( [timeStampToDate(element.t),element.bv] );								});							}							else {								$.each(data.e, function (i,element) {									dataArray.push([timeStampToDate(element.t+data.bt),element.bv]);								});							}						}					}				}			}			$('#'+dataTableDiv).find('table').dataTable().fnAddData(dataArray);		}	}	$('#'+dataTableDiv).show();}//Static graph Viewfunction displayRawTimeSerie(div,data) {	$('#'+div).show();		if(typeof data.e!='undefined') {		if($('#'+div).children().size()==0){					if(typeof data.e[0].s!='undefined') {				graphType='area';			}			else {				graphType='line';			}					$(document).ready(function() {				rawChart = new Highcharts.StockChart({					chart: {						renderTo: div,					},					title: {						text: data.bn					},					xAxis: {		//				ordinal:false					},					series: [{						name: data.bn,						data: SenMLToHighcharts(data),						type: graphType,						step: (typeof data.e[0].bv!='undefined')					}]				});			});		}	}}//Dynamic Chart Viewfunction setupDynamic(div,data) {	$.ajax({		type: "get",		url: getURL(getTopology(),"registry","/sensapp/registry/sensors/"+data.bn),		headers: { 			Accept : "application/json"		},		dataType: 'json',		success:			function (sensorInfos, textStatus, jqXHR) {				displayRawDynamicChart(div,data,sensorInfos.backend.dataset,sensorInfos.backend.kind)			},		error:			function (jqXHR, textStatus, errorThrown) {				alertMessage("error",errorThrown,5000);			}	});}function displayRawDynamicChart(div,data,dataset,backend) {	$('#'+div).show();	if(typeof data.e!='undefined') {		if($('#'+div).children().size()==0){			if(typeof data.e[0].s!='undefined') {				graphType='area';			}			else {				graphType='line';			}					$(document).ready(function() {				rawChart = new Highcharts.StockChart({					chart: {						renderTo: div,						events : {							load : function() {									if(typeof data.bt != 'undefined') {										getUpdate(this,dataset,backend,div,data.e[data.e.length-1].t,data.bt);									} 									else {										getUpdate(this,dataset,backend,div,data.e[data.e.length-1].t,0);									}							}						}					},					title: {						text: data.bn					},					xAxis: {						ordinal:false					},					series: [{						name: data.bn,						data: SenMLToHighcharts(data),						type: graphType,						step: (typeof data.e[0].bv!='undefined')					}]				});			});		}	}}//Refresh Dynamicfunction getUpdate(chart,dataset,backend,div,lastTime,baseTime) {	$.ajax({		type: "get",		url: getURL(getTopology(),"database."+backend,dataset+"?from="+(lastTime+baseTime+1)+"&sorted=asc"),		headers: { 			Accept : "application/json"		},		dataType: 'json',		success:			function (newData, textStatus, jqXHR) {				$('body').append(getURL(getTopology(),"database."+backend,dataset+"?from="+(lastTime))+"<br>");				$('body').append(JSON.stringify(newData)+"<br>");				if (typeof newData.e!='undefined') {					$.each(newData.e, function (i,point) {						chart.series[0].addPoint([(point.t+baseTime)*1000,point.v],false,false);					});					chart.redraw();					timeOut = setTimeout(function () {getUpdate(chart,dataset,backend,div,newData.e[newData.e.length-1].t,baseTime)},5000);				} 				else {					timeOut = setTimeout(function () {getUpdate(chart,dataset,backend,div,lastTime,baseTime)},5000);				}			},		error:			function (jqXHR, textStatus, errorThrown) {				alertMessage("error",errorThrown,5000);			}	});}//Get out of the selected sensorfunction cleanData(sensorDiv,dataDiv) {	$('#'+dataDiv).find('#rawDataTableDiv').find('table').dataTable().fnClearTable();	$('#'+dataDiv).find('#rawTimeSerieDiv').empty();	$('#'+dataDiv).find('#dynamicDiv').empty();	jsonRawData = [];	$('#'+dataDiv).find('#rawDataTableDiv').hide();	$('#'+dataDiv).find('#rawTimeSerieDiv').hide();	$('#'+dataDiv).find('#dynamicDiv').hide();	$('#'+dataDiv).hide();	if(typeof timeOut != 'undefined') {		clearTimeout(timeOut);	}	$('#'+sensorDiv).show();}