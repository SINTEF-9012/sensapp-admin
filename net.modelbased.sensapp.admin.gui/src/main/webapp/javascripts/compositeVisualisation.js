//*********************************// Sensor Display Functions//**********************************//Init Main Pagefunction getAllCompositesForVisu (targetURL,compositeDiv) {	$.ajax({		type: "get",		url: targetURL,		contentType: "application/json",		dataType:'json',		success: 			function (data, textStatus, jqXHR) {				if (data.length!=0) {					displayAllCompositesForVisu(data,compositeDiv);				}			},		error: 			function (jqXHR, textStatus, errorThrown) {				alertMessage("error",errorThrown,5000);			}	});}//display the compositesfunction displayAllCompositesForVisu (data,compositeDiv) {				var sensorArray = new Array();	var columnsJson = [{"sTitle":"Name"},{"sTitle":"Description"},{"sTitle":"Actions"}];	$.each(data, function (i,element) {		sensorArray.push( [createNameColumn(element.id,getURL(getTopology(),"registry","/sensapp/registry/composite/sensors/"+element.id)).html(),						   createDescriptionColumn(element,"composite").html(),						   createVisuActions(element).html()] );	});	tableToJqueryDataTable(sensorArray,columnsJson,$('#'+compositeDiv).find('table').attr('id'));}function createVisuActions(composite) {	return $(document.createElement('td'))		.append(				//View Button			$(document.createElement('a'))				.attr("class","btn")				.attr("onclick","getData('"+composite.id+"','compositeDiv','data','exportDiv');")				.text("View")		);}//*********************************// Raw Display Functions//**********************************function getData(compositeId,compositeDiv,dataDiv,exportDiv) {	//Please Wait	$('body').css('cursor','wait');	$('a').css('cursor','wait');	$('button').css('cursor','wait');	$('#'+compositeDiv).hide();		//Get Options	var from = $('#'+compositeDiv).find('#from').val();	var to = $('#'+compositeDiv).find('#to').val();	var limit = $('#'+compositeDiv).find('#limit').val();		var query="?";	if(to!="") {		if(from!="") {			query+="from="+from+"&to="+to+"&";		}		else {			query+="from=0&to="+to+"&";		}	}	else {		if(from!="") {			query+="from="+from+"&";		}	}	if(limit!="") {		query+="limit="+limit+"&";	}	query+="sorted=asc";	//get the sensors of the coøposite	$.ajax({		type: "get",		url: getURL(getTopology(),"registry","/sensapp/registry/composite/sensors/"+compositeId),		headers: { 			Accept : "application/json"		},		dataType: 'json',		success:			function (composite, textStatus, jqXHR) {				//get the sensors infos of each sensor				$.each(composite.sensors, function (i,targetURL) {					getSensor(targetURL,query,i,composite.sensors.length,dataDiv);				});		},		error:			function (jqXHR, textStatus, errorThrown) {				$('body').css('cursor','auto');				$('a').css('cursor','pointer');				$('button').css('cursor','pointer');				alertMessage("error",errorThrown,5000);		}	});		//get the sensors infos	function getSensor(targetURL,query,i,length,dataDiv) {		$.ajax({			type: "get",			url: targetURL,			headers: { 				Accept : "application/json"			},			dataType: 'json',			success:				function (sensor, textStatus, jqXHR) {						//get the data of this sensor						getSensorData(sensor.backend.dataset,sensor.id,query,i,length,dataDiv);			},			error:				function (jqXHR, textStatus, errorThrown) {					$('body').css('cursor','auto');					$('a').css('cursor','pointer');					$('button').css('cursor','pointer');					alertMessage("error",errorThrown,5000);			}		});		}		//get the sensor data	function getSensorData(targetURL,sensorId,query,i,length,dataDiv) {		//Get data		$.ajax({			type: "get",			url: targetURL+query,			headers: { 				Accept : "application/json"			},			dataType: 'json',			success:				function (data, textStatus, jqXHR) {					jsonRawData[sensorId] = data;					createSensorDiv(sensorId,i,data,dataDiv);					if(i+1==length) {						$('body').css('cursor','auto');						$('a').css('cursor','pointer');						$('button').css('cursor','pointer');					}				},			error:				function (jqXHR, textStatus, errorThrown) {					$('body').css('cursor','auto');					$('a').css('cursor','pointer');					$('button').css('cursor','pointer');					alertMessage("error",errorThrown,5000);				}		});	}}//create the display div of the sensorfunction createSensorDiv (sensorId,i,data,dataDiv) {	var sensorNumber = i	$('#'+dataDiv).append(		$(document.createElement('div'))					.attr("id","widgets")			.append(				$(document.createElement('h2'))					.text(sensorId))			.append(				//switch view button				$(document.createElement('div'))					.attr("class","btn-group")					.attr("data-toggle","buttons-radio")					.css("margin-left","35%")					.append(						//table						$(document.createElement("button"))							.attr("id","tableButton")							.attr("class","btn btn-large active")							.click(function () {								displayRawData(sensorNumber+'_rawDataTableDiv',jsonRawData[sensorId]);							})							.text("Table"))					.append(						//chart						$(document.createElement("button"))							.attr("id","timeSerieButton")							.attr("class","btn btn-large")							.click(function () {								displayRawTimeSerie(sensorNumber+'_rawTimeSerieDiv',jsonRawData[sensorId]);							})							.text("Chart"))					.append(						//dynamic						$(document.createElement("button"))							.attr("id","dynamicButton")							.attr("class","btn btn-large")							.click(function () {								setupDynamic(sensorNumber+'_dynamicDiv',jsonRawData[sensorId]);							})							.text("Dynamic Chart"))														.append(						//barchart						$(document.createElement("button"))							.attr("id","barButton")							.attr("class","btn btn-large")							.click(function () {								displayBar(sensorNumber+'_barDiv',jsonRawData[sensorId]);							})							.text("Bar Chart")))			.append(				//table div				$(document.createElement('div'))					.attr("id",sensorNumber+"_rawDataTableDiv")					.append(						$(document.createElement('table'))							.attr("id",sensorNumber+"_rawDataTable")							.attr("class","table table-striped table-bordered")							.attr("cellpadding","0")							.attr("cellspacing","0")							.attr("border","0")							.append(								$(document.createElement("thead"))									.append(										$(document.createElement('tr'))											.append(												$(document.createElement("th"))													.text("Time"))											.append(												$(document.createElement("th"))													.text("Value"))))							.append(								$(document.createElement('tbody')))))			.append(				//chart div				$(document.createElement("div"))					.attr("id",sensorNumber+"_rawTimeSerieDiv")					.hide())			.append(				//dynamic div				$(document.createElement("div"))					.attr("id",sensorNumber+"_dynamicDiv")					.hide())										.append(				//barvhart div				$(document.createElement("div"))					.attr("id",sensorNumber+"_barDiv")					.hide())	);		//turn table into datatables	tableToJqueryDataTable([],[{"sTitle":"Time"},{"sTitle":"Value"}],sensorNumber+"_rawDataTable",'desc');	//display as table by default	displayRawData(sensorNumber+"_rawDataTableDiv",data)}//Table Viewfunction displayRawData(div,data) {	$('#'+div).show();	$('#'+div).parent().find("[id$='_barDiv']").hide();	$('#'+div).parent().find("[id$='_dynamicDiv']").hide();	$('#'+div).parent().find("[id$='_rawTimeSerieDiv']").hide();			if($('#'+div).find('.dataTables_empty').size()>0) {		var dataArray = new Array();			//Check out the kind of data		if(typeof data.bt=='undefined') {			data.bt=0;		}		if(typeof data.e!='undefined') {			//numeric			if(typeof data.e[0].v!='undefined') {				$('#'+div).find("th:contains('Value')").html("Value ("+data.e[0].u+")");				$.each(data.e, function (i,element) {					dataArray.push( [timeStampToDate(element.t+data.bt),element.v] );				});			} else { 				//string				if (typeof data.e[0].sv!='undefined') {					$('#'+div).find("th:contains('Value')").append(" ("+data.e[0].u+")");					$.each(data.e, function (i,element) {						dataArray.push( [timeStampToDate(element.t+data.bt),element.sv] );					});				} else { 					//bool					if (typeof data.e[0].bv!='undefined') {						$.each(data.e, function (i,element) {							dataArray.push( [timeStampToDate(element.t+data.bt),element.bv] );						});					} else {						//summed						if (typeof data.e[0].s!='undefined') {									$('#'+div).find("th:contains('Value')").append(" ("+data.e[0].u+")");													$.each(data.e, function (i,element) {								dataArray.push([timeStampToDate(element.t+data.bt),element.bv]);							});						}						}				}			}		}		$('#'+div).find('table').dataTable().fnAddData(dataArray);	}	}//Static graph Viewfunction displayRawTimeSerie(div,data) {	$('#'+div).show();	$('#'+div).parent().find("[id$='_barDiv']").hide();	$('#'+div).parent().find("[id$='_dynamicDiv']").hide();	$('#'+div).parent().find("[id$='_rawDataTableDiv']").hide();		if(typeof data.e!='undefined') {		if($('#'+div).children().size()==0){					if(typeof data.e[0].s!='undefined') {				graphType='area';			}			else {				graphType='line';			}					$(document).ready(function() {				rawChart = new Highcharts.StockChart({					chart: {						renderTo: div,					},					title: {						text: data.bn					},					xAxis: {						ordinal:false					},					series: [{						name: data.bn,						data: SenMLToHighcharts(data),						type: graphType,						step: (typeof data.e[0].bv!='undefined')					}]				});			});		}	}}//Dynamic Chart Viewfunction setupDynamic(div,data) {	$.ajax({		type: "get",		url: getURL(getTopology(),"registry","/sensapp/registry/sensors/"+data.bn),		headers: { 			Accept : "application/json"		},		dataType: 'json',		success:			function (sensorInfos, textStatus, jqXHR) {				displayRawDynamicChart(div,data,sensorInfos.backend.dataset,sensorInfos.backend.kind)			},		error:			function (jqXHR, textStatus, errorThrown) {				alertMessage("error",errorThrown,5000);			}	});}//dynanic char displayfunction displayRawDynamicChart(div,data,dataset,backend) {	$('#'+div).show();	$('#'+div).parent().find("[id$='_barDiv']").hide();	$('#'+div).parent().find("[id$='_rawTimeSerieDiv']").hide();	$('#'+div).parent().find("[id$='_rawDataTableDiv']").hide();				if(typeof data.e!='undefined') {		if($('#'+div).children().size()==0){			if(typeof data.e[0].s!='undefined') {				graphType='area';			}			else {				graphType='line';			}					$(document).ready(function() {				rawChart = new Highcharts.StockChart({					chart: {						renderTo: div,						events : {							load : function() {									if(typeof data.bt != 'undefined') {										getUpdate(this,dataset,backend,div,data.e[data.e.length-1].t,data.bt);									} 									else {										getUpdate(this,dataset,backend,div,data.e[data.e.length-1].t,0);									}							}						}					},					title: {						text: data.bn					},					xAxis: {						ordinal:false					},					series: [{						name: data.bn,						data: SenMLToHighcharts(data),						type: graphType,						step: (typeof data.e[0].bv!='undefined')					}]				});			});		}	}}//Refresh Dynamic (loop until back button click)function getUpdate(chart,dataset,backend,div,lastTime,baseTime) {	$.ajax({		type: "get",		url: dataset+"?from="+(lastTime+baseTime+1)+"&sorted=asc",		headers: { 			Accept : "application/json"		},		dataType: 'json',		success:			function (newData, textStatus, jqXHR) {				if (typeof newData.e!='undefined') {					$.each(newData.e, function (i,point) {						chart.series[0].addPoint([(point.t+baseTime)*1000,point.v],false,false);					});					chart.redraw();					timeOut = setTimeout(function () {getUpdate(chart,dataset,backend,div,newData.e[newData.e.length-1].t,baseTime)},1000);				} 				else {					timeOut = setTimeout(function () {getUpdate(chart,dataset,backend,div,lastTime,baseTime)},1000);				}			},		error:			function (jqXHR, textStatus, errorThrown) {				alertMessage("error",errorThrown,5000);			}	});}//Static graph Viewfunction displayBar(div,data) {	$('#'+div).show();	$('#'+div).parent().find("[id$='_dynamicDiv']").hide();	$('#'+div).parent().find("[id$='_rawTimeSerieDiv']").hide();	$('#'+div).parent().find("[id$='_rawDataTableDiv']").hide();			if(typeof data.e!='undefined') {		if($('#'+div).children().size()==0){					$(document).ready(function() {				rawChart = new Highcharts.StockChart({					chart: {						renderTo: div,					},					title: {						text: data.bn					},					xAxis: {						ordinal:false					},					series: [{						name: data.bn,						data: SenMLToHighcharts(data),						type: 'column',					}]				});			});		}	}}//Get out of the selected sensorfunction cleanData(compositeDiv,dataDiv) {	$('#'+dataDiv).find('#widgets').empty();	if(typeof timeOut != 'undefined') {		clearTimeout(timeOut);	}	$('#'+compositeDiv).show();}